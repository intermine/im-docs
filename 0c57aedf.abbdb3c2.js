(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{547:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=u(n),m=i,h=b["".concat(o,".").concat(m)]||b[m]||p[m]||a;return n?r.a.createElement(h,s(s({ref:t},c),{},{components:n})):r.a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},83:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return u}));var i=n(3),r=n(7),a=(n(0),n(547)),o={title:"Tutorial"},s={unversionedId:"web-services/tutorial",id:"version-4.0.0/web-services/tutorial",isDocsHomePage:!1,title:"Tutorial",description:"The InterMine API is made more accessible through the publication of a number of client libraries in different languages. For the purpose of this tutorial, we will use the Python client library for the illustration of examples, but any of the client libraries \\(in Perl, Java, Ruby and JavaScript\\) provides similar functionality. Similarly, we will use FlyMine \\(www.flymine.org\\) as an example of an InterMine web-service, but the techniques discussed here are applicable to any of the available implementations.",source:"@site/versioned_docs/version-4.0.0/web-services/tutorial.md",slug:"/web-services/tutorial",permalink:"/im-docs/docs/4.0.0/web-services/tutorial",editUrl:"https://github.com/intermine/im-docs/edit/master/versioned_docs/version-4.0.0/web-services/tutorial.md",version:"4.0.0"},l=[{value:"Logging In / Authenticating",id:"logging-in--authenticating",children:[]},{value:"Managing your Personal Data: Lists",id:"managing-your-personal-data-lists",children:[]},{value:"Running a simple workflow:",id:"running-a-simple-workflow",children:[]},{value:"Regions",id:"regions",children:[]},{value:"Queries",id:"queries",children:[]}],c={toc:l};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The InterMine API is made more accessible through the publication of a number of client libraries in different languages. For the purpose of this tutorial, we will use the Python client library for the illustration of examples, but any of the client libraries ","(","in Perl, Java, Ruby and JavaScript",")"," provides similar functionality. Similarly, we will use FlyMine ","(",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"http://www.flymine.org%5C"}),"www.flymine.org\\"),") as an example of an InterMine web-service, but the techniques discussed here are applicable to any of the available implementations."),Object(a.b)("h3",{id:"logging-in--authenticating"},"Logging In / Authenticating"),Object(a.b)("p",null,"In the web-application interface we 'log in' to gain access to our personal data. When using the web-service API we speak of authentication as the process whereby your requests are mapped to a particular user account."),Object(a.b)("p",null,"The recommended manner of authentication is through the use of API tokens; you can get yours by visiting the appropriate section of the web-application ","(",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"http://www.flymine.org/query/mymine?tab=api"}),"http://www.flymine.org/query/mymine?tab=api"),")",". The token is a long string which is unique across the mine - since its use is equivalent to your password, remember to keep it safe."),Object(a.b)("p",null,"You can authenticate with a mine as follows:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),"from intermine.webservice import Service\n\nflymine = Service('www.flymine.org/query', token = 'abcd')\n")),Object(a.b)("p",null,"If the URL for the mine is incorrect, or the token is, an error will be thrown."),Object(a.b)("p",null,"While it is also possible to use your username and password to authenticate with the webservice, this is strongly discouraged. This is due to the security implications of transmitting your password, not to mention storing it on disk, in order to use it in code."),Object(a.b)("h3",{id:"managing-your-personal-data-lists"},"Managing your Personal Data: Lists"),Object(a.b)("p",null,"One of the main reasons to use the webservices is to read and manipulate the data important to you, and lists are the main way to manage this."),Object(a.b)("p",null,"To read the set of lists you have access to:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),"from intermine.webservice import Service\n\nflymine = Service('www.flymine.org/query', token = TOKEN)\nfor imlist in flymine.get_all_lists():\n  print imlist.name\n")),Object(a.b)("p",null,"To calculate the enrichment results for a given list:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),"mylist = flymine.get_list('demo-list')\nfor item in mylist.calculate_enrichment('pathway_enrichment'):\n  print item.identifier, item.description, item.p_value\n")),Object(a.b)("p",null,"Creating a list from a file with identifiers in it is as straight-forward as naming that file. This is done like so:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'new_list = flymine.create_list("some/file/with.ids", "Gene")\n')),Object(a.b)("p",null,"If the identifiers are already in memory, in anything iterable, then that can be used instead. In the following case, a string will be built up by reading the results of a database query."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),"idents = db.query('SELECT identifier FROM GENE WHERE ...')\nnew_list = flymine.create_list(idents, \"Gene\")\n")),Object(a.b)("p",null,"Lists can be combined with standard set operations, which are overloaded in the languages that support such features:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'list_on_server = service.get_list("On server")\nin_both = new_list & list_on_server\nin_both.name = "Intersection %s and %s" % (new_list, list_on_server)\nfor gene in in_both:\n   do_something_with(gene)\n')),Object(a.b)("h3",{id:"running-a-simple-workflow"},"Running a simple workflow:"),Object(a.b)("p",null,"We should have enough pieces now to put together a simple workflow that demonstrates the kinds of operations we want to put together and how they may be combined."),Object(a.b)("p",null,"Try and develop a script which will:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Read all the files in a directory."),Object(a.b)("li",{parentName:"ul"},"Create a list for each one from their contents, named after the file."),Object(a.b)("li",{parentName:"ul"},"Find the pathways for which the genes in each list are enriched above a certain threshold."),Object(a.b)("li",{parentName:"ul"},"Create a list of those pathways.")),Object(a.b)("h3",{id:"regions"},"Regions"),Object(a.b)("p",null,"One can query for features in a region as follows:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'from interminebio import RegionQuery\n\norg = "D. melanogaster"\nfeature_types = ["Exon", "Intron"]\nregions =  ["2L:14614843..14619614"]\n\nq = RegionQuery(flymine, org, features, regions, is_interbase = false)\n\nfor fasta in q.fasta():\n    print fasta\n')),Object(a.b)("p",null,"The items can be saved in a list and then used in any other query."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'flymine.create_list(q, name = "List from Regions")\n')),Object(a.b)("h3",{id:"queries"},"Queries"),Object(a.b)("p",null,"The interface for creating queries borrows syntax and terminology from other DB query libraries."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'query = s.query("Gene").\\\n          select("*", "pathways.*").\\\n          where("GENE", "IN", "demo-list").\\\n          order_by("symbol")\nfor row in query.rows(start=10, size=5):\n    handle_row(row)\n')))}u.isMDXComponent=!0}}]);