(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{167:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return a})),r.d(t,"metadata",(function(){return s})),r.d(t,"toc",(function(){return c})),r.d(t,"default",(function(){return p}));var n=r(3),o=r(7),i=(r(0),r(549)),a={title:"HikariCP and InterMine settings"},s={unversionedId:"system-requirements/software/postgres/hikari",id:"system-requirements/software/postgres/hikari",isDocsHomePage:!1,title:"HikariCP and InterMine settings",description:"InterMine now uses HikariCP as its default JDBC connection pool. If this is not available, InterMine will use the default PostgreSQL distribution, PGPoolingDataSource.",source:"@site/docs/system-requirements/software/postgres/hikari.md",slug:"/system-requirements/software/postgres/hikari",permalink:"/im-docs/docs/next/system-requirements/software/postgres/hikari",editUrl:"https://github.com/intermine/im-docs/edit/master/docs/system-requirements/software/postgres/hikari.md",version:"current",sidebar:"someSidebar",previous:{title:"Installing PostgreSQL",permalink:"/im-docs/docs/next/system-requirements/software/postgres/postgres"},next:{title:"Tomcat",permalink:"/im-docs/docs/next/system-requirements/software/tomcat"}},c=[{value:"Which properties?",id:"which-properties",children:[]},{value:"Tomcat",id:"tomcat",children:[]},{value:"Other HikariCP configurations",id:"other-hikaricp-configurations",children:[]},{value:"Further reading",id:"further-reading",children:[]}],u={toc:c};function p(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},u,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"InterMine now uses ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/brettwooldridge/HikariCP"}),"HikariCP")," as its default JDBC connection pool. If this is not available, InterMine will use the default PostgreSQL distribution, ",Object(i.b)("inlineCode",{parentName:"p"},"PGPoolingDataSource"),"."),Object(i.b)("p",null,"The maximum number of connections allocated to a database, set in the properties files, is now reserved at the start and it is a ceiling to the number of connections a database can reach. As a consequence, setting for the previously used connection pool could exhaust the PostgreSQL allocation at start up ","(","either of building an InterMine database or a web application",")","."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Reasonable settings for ",Object(i.b)("inlineCode",{parentName:"p"},"datasource.maxConnections")," are 20 for the production database and 5 for other databases. You may need to increase your Postgres parameter ",Object(i.b)("inlineCode",{parentName:"p"},"max connections"),", for example to 250.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note"),"\nThe InterMine property ",Object(i.b)("inlineCode",{parentName:"p"},"datasource.maxConnections")," corresponds to the ",Object(i.b)("inlineCode",{parentName:"p"},"maximumPoolSize")," of the HikariCP."),Object(i.b)("h2",{id:"which-properties"},"Which properties?"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"maxConnections")," property is set in ",Object(i.b)("inlineCode",{parentName:"p"},"default.intermine.production.properties")," in InterMine:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"# in intermine-resources\n# default.intermine.production.properties\ndb.production.datasource.class=com.zaxxer.hikari.HikariDataSource\ndb.production.datasource.dataSourceClassName=org.postgresql.ds.PGSimpleDataSource\ndb.production.datasource.dataSourceName=db.production\n#db.production.datasource.serverName=server_name\n#db.production.datasource.databaseName=db_name\n#db.production.datasource.user=user\n#db.production.datasource.password=password\ndb.production.datasource.maxConnections=20\ndb.production.driver=org.postgresql.Driver\ndb.production.platform=PostgreSQL\n")),Object(i.b)("p",null,"You can override this property in your mine's property file."),Object(i.b)("h2",{id:"tomcat"},"Tomcat"),Object(i.b)("p",null,"You'll also need to update your Tomcat settings. Add ",Object(i.b)("inlineCode",{parentName:"p"},"clearReferencesStopTimerThreads")," to your $TOMCAT/conf/context.xml file, so it should look like:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-markup"}),'<Context sessionCookiePath="/" useHttpOnly="false" clearReferencesStopTimerThreads="true">\n...\n</Context>\n')),Object(i.b)("h2",{id:"other-hikaricp-configurations"},"Other HikariCP configurations"),Object(i.b)("p",null,"While HikariCP default settings are good, there could be situations where some changes could be useful. HikariCP provides a good number of parameters that can be set ","(","see the configuration section at ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/brettwooldridge/HikariCP"}),"HikariCP"),")","."),Object(i.b)("p",null,"For example, sometimes it can be useful to set the minimumIdle number of connections in order to avoid exceeding the number of connections set in the database. This could be the case in development and when deploying multiple webapps. For performance purposes, it is suggested by Hikari people to have ",Object(i.b)("inlineCode",{parentName:"p"},"minimumIdle = maximumPoolSize")," ","(","InterMine maxConnections",")",". To set a minimumIdle parameter, just add a line like the following to your mine's properties file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"db.production.datasource.minimumIdle=10\n")),Object(i.b)("h2",{id:"further-reading"},"Further reading"),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing/"}),"About Pool Sizing")),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://groups.google.com/forum/#!forum/hikari-cp/"}),"Hikari Discussion Forum")))}p.isMDXComponent=!0},549:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return m}));var n=r(0),o=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=o.a.createContext({}),p=function(e){var t=o.a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=p(e.components);return o.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=p(r),b=n,m=l["".concat(a,".").concat(b)]||l[b]||d[b]||i;return r?o.a.createElement(m,s(s({ref:t},u),{},{components:r})):o.a.createElement(m,s({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,a[1]=s;for(var u=2;u<i;u++)a[u]=r[u];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"}}]);