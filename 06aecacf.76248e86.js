(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{549:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return m}));var r=a(0),n=a.n(r);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function b(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?b(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):b(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=n.a.createContext({}),s=function(e){var t=n.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},j=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,b=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(a),j=r,m=d["".concat(b,".").concat(j)]||d[j]||p[j]||l;return a?n.a.createElement(m,i(i({ref:t},c),{},{components:a})):n.a.createElement(m,i({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,b=new Array(l);b[0]=j;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,b[1]=i;for(var c=2;c<l;c++)b[c]=a[c];return n.a.createElement.apply(null,b)}return n.a.createElement.apply(null,a)}j.displayName="MDXCreateElement"},76:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return o})),a.d(t,"default",(function(){return s}));var r=a(3),n=a(7),l=(a(0),a(549)),b={title:"Id Resolvers"},i={unversionedId:"database/data-sources/id-resolvers",id:"database/data-sources/id-resolvers",isDocsHomePage:!1,title:"Id Resolvers",description:"The ID resolver uses the files in the specified directory to create a large map. The key for the map is the unique identifier \\(the MOD ID, for example the MGI identifiers\\). The values in the map are all the symbols, old identifiers, dbxrefs \\(e.g. Ensembl\\).",source:"@site/docs/database/data-sources/id-resolvers.md",slug:"/database/data-sources/id-resolvers",permalink:"/im-docs/docs/next/database/data-sources/id-resolvers",editUrl:"https://github.com/intermine/im-docs/edit/master/docs/database/data-sources/id-resolvers.md",version:"current",sidebar:"someSidebar",previous:{title:"Python Items API",permalink:"/im-docs/docs/next/database/data-sources/apis/python-items-api"},next:{title:"Data Licences",permalink:"/im-docs/docs/next/database/data-sources/data-licences"}},o=[{value:"ID resolvers available in InterMine",id:"id-resolvers-available-in-intermine",children:[]},{value:"Using ID Resolvers in InterMine data converters",id:"using-id-resolvers-in-intermine-data-converters",children:[]},{value:"Using ID Resolvers in your data converters",id:"using-id-resolvers-in-your-data-converters",children:[{value:"Configuration",id:"configuration",children:[]},{value:"IdResolverService",id:"idresolverservice",children:[]},{value:"Resolve an Id",id:"resolve-an-id",children:[]}]},{value:"Writing a New ID resolver",id:"writing-a-new-id-resolver",children:[]},{value:"Future Plans",id:"future-plans",children:[]}],c={toc:o};function s(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"The ID resolver uses the files in the specified directory to create a large map. The key for the map is the unique identifier ","(","the MOD ID, for example the MGI:, RGD, FBgn, ZFIN: identifiers",")",". The values in the map are all the symbols, old identifiers, dbxrefs ","(","e.g. Ensembl",")","."),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"unique gene identifier"),Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"symbol, name, ensembl ID \u2026"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"MGI:97490"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"pax6, paired box gene 6 \u2026")))),Object(l.b)("p",null,"The ID resolver then uses this map to replace old or non-unique identifiers with the unique identifier. This allows genes to be merged correctly into the database, and lets each mine be interoperable with other friendly mines."),Object(l.b)("p",null,"The ID resolver is used in several data sources, Homologene for example."),Object(l.b)("p",null,"If you look at the Homologene data, you'll see they don't use the MGI identifier. See:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"})),Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"})),Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"})),Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"})),Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"1212"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"10090"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"18508"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Pax6"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"7305369 NP","_","038655.1")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"1212"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"10116"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"25509"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Pax6"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"6981334 NP","_","037133.1")))),Object(l.b)("p",null,'When parsing the Homologene data file, the ID resolver replaces the symbol "Pax6" with the MGI identifier. The parser sets MGI:97490 to be the primary identifier then stores the gene to the database. Similarly, it replaces Pax6 with "RGD:3258" for the rat gene. And so on.'),Object(l.b)("h2",{id:"id-resolvers-available-in-intermine"},"ID resolvers available in InterMine"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"})),Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"})),Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"EntrezGeneIdResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"NCBI gene info for a collection of organisms"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(l.b)("a",Object(r.a)({parentName:"td"},{href:"ftp://ftp.ncbi.nih.gov/gene/DATA/gene_info.gz"}),"ftp://ftp.ncbi.nih.gov/gene/DATA/gene","_","info.gz"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"FlyBaseIdResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"flybase chado db, for \u2018\u2019D.melanogaster\u2019\u2019 only"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(l.b)("a",Object(r.a)({parentName:"td"},{href:"ftp://ftp.flybase.net/releases/current/psql"}),"ftp://ftp.flybase.net/releases/current/psql")," flybase chado")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"WormBaseChadoIdResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"wormbase chado db, for \u2018\u2019C.elegans\u2019\u2019 only"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"modENCODE specific")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"ZfinIdentifiersResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"zebrafish ids"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(l.b)("a",Object(r.a)({parentName:"td"},{href:"http://zfin.org/downloads/identifiersForIntermine.txt"}),"http://zfin.org/downloads/identifiersForIntermine.txt"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"MgiIdentifiersResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"mouse ids"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(l.b)("a",Object(r.a)({parentName:"td"},{href:"ftp://ftp.informatics.jax.org/pub/reports/MRK_List2.rpt"}),"ftp://ftp.informatics.jax.org/pub/reports/MRK","_","List2.rpt"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"RgdIdentifiersResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"rat ids"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(l.b)("a",Object(r.a)({parentName:"td"},{href:"ftp://rgd.mcw.edu/pub/data_release/GENES_RAT.txt"}),"ftp://rgd.mcw.edu/pub/data","_","release/GENES","_","RAT.txt"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"HgncIdResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"HGNC human gene ids"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Uses the biomart service at ",Object(l.b)("a",Object(r.a)({parentName:"td"},{href:"http://www.genenames.org"}),"http://www.genenames.org"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"EnsemblIdResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Ensembl id"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"customised")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"HumanIdResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"human ids"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"customised")))),Object(l.b)("h2",{id:"using-id-resolvers-in-intermine-data-converters"},"Using ID Resolvers in InterMine data converters"),Object(l.b)("p",null,"Many data converters use the Entrez ","(","NCBI",")"," Gene ID resolver:"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Download the identifier file -"),Object(l.b)("p",{parentName:"li"},Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"ftp://ftp.ncbi.nih.gov/gene/DATA/gene_info.gz"}),"ftp://ftp.ncbi.nih.gov/gene/DATA/gene","_","info.gz"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Unzip the file to ",Object(l.b)("inlineCode",{parentName:"p"},"/DATA_DIR/ncbi/gene_info"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Create a sub directory ",Object(l.b)("inlineCode",{parentName:"p"},"/DATA_DIR/idresolver/")," as file root path and a symbolic link ",Object(l.b)("inlineCode",{parentName:"p"},"entrez")," to the file"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ cd /DATA_DIR/idresolver/\n$ ln -s /DATA_DIR/ncbi/gene_info entrez\n"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Add the root path to the file in ",Object(l.b)("inlineCode",{parentName:"p"},"~/.intermine/MINE.properties")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"resolver.file.rootpath=/DATA_DIR/idresolver/\n")))),Object(l.b)("p",null,"Id resolvers and corresponding symbolic to data file:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Resolver"),Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Symbolic link"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"EntrezGeneIdResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"entrez")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"WormBaseChadoIdResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"wormid")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"ZfinIdentifiersResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"zfin")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"MgiIdentifiersResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"mgi")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"RgdIdentifiersResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"rgd")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"HgncIdResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"hgnc")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"EnsemblIdResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"ensembl")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"HumanIdResolverFactory"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"humangene")))),Object(l.b)("p",null,"In the data converter, the ID resolver is given an identifier. The resolver then looks in the map for the identifier."),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"number of matches"),Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"returns"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"0"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"NULL")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"1"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"new identifier")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),">","1"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"NULL")))),Object(l.b)("h2",{id:"using-id-resolvers-in-your-data-converters"},"Using ID Resolvers in your data converters"),Object(l.b)("p",null,"A factory will find data root path from ",Object(l.b)("inlineCode",{parentName:"p"},"~/.intermine/MINE_NAME.properties"),", path needs to be absolute."),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"resolver.file.rootpath=/DATA_DIR/idresolver/\n")),Object(l.b)("p",null,"the key and the symbolic link of the data file need to be hard-coded in factory class, e.g. in ",Object(l.b)("inlineCode",{parentName:"p"},"EntrezGeneIdResolverFactory")),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'private final String propKey = "resolver.file.rootpath";\nprivate final String resolverFileSymbo = "entrez";\n')),Object(l.b)("p",null,"As for database case, e.g. flybase chado"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"# chado DB for flybase data\n\ndb.flybase.datasource.class=org.postgresql.jdbc3.Jdbc3PoolingDataSource\ndb.flybase.datasource.dataSourceName=db.flybase\ndb.flybase.datasource.serverName=NAME\ndb.flybase.datasource.databaseName=DBNAME\ndb.flybase.datasource.user=USER\ndb.flybase.datasource.password=PWD\ndb.flybase.datasource.maxConnections=10\ndb.flybase.driver=org.postgresql.Driver\ndb.flybase.platform=PostgreSQL\n")),Object(l.b)("p",null,"the key also needs to be hard-coded in factory class, e.g. in FlyBaseIdResolverFactory"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'private final String propName = "db.flybase";\n')),Object(l.b)("h3",{id:"configuration"},"Configuration"),Object(l.b)("p",null,"The Entrez gene identifier source has a configuration file, ",Object(l.b)("inlineCode",{parentName:"p"},"entrezIdResolver_config.properties"),". You shouldn't have to edit this file."),Object(l.b)("p",null,"This config will parse fruit fly identifiers, e.g. FLYBASE:FBgn0088803"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"7227.primaryIdentifier.xref=FLYBASE\n")),Object(l.b)("p",null,"If you don't want to strip the prefix from the identifier, use this config:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"10116.primaryIdentifier.prefix=RGD:\n10090.primaryIdentifier.prefix=MGI:\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Warning"),"\nThe EBI changed how they format their data. If you have a recent data file, you do NOT want the above configuration for MGI."),Object(l.b)("p",null,"To replace a taxonomy identifier with a strain, use the following:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"4932.strains=559292\n")),Object(l.b)("p",null,"To ignore certain organisms, do this:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"taxon.ignored = 7165,6239\n")),Object(l.b)("h3",{id:"idresolverservice"},"IdResolverService"),Object(l.b)("p",null,"IdResolverService is a java class providing static methods to get id resolver directly. It's also the most straight forward way to create an id resolver. For example, to create a fish id resolver by taxon id in a converter:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'IdResolver rslvr = IdResolverService.getIdResolverByOrganism("7955");\n')),Object(l.b)("p",null,"You can use the IdResolverService to create resolver by taxon id, a list of taxon ids, or by organism, e.g."),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"IdResolver flyRslvr = IdResolverService.getFlyIdResolver();\n")),Object(l.b)("h3",{id:"resolve-an-id"},"Resolve an Id"),Object(l.b)("p",null,"As the resolver maintains java maps of one or more organisms' identifiers, you must explicitly tell it which organism you want it to resolve for, e.g."),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"String pid = flyRslvr.resolveId(taxonId, identifier).iterator().next();\n")),Object(l.b)("p",null,"It is also possible there are two or more matching primary identifiers for a particular identifier, in this case, discard this identifier, e.g."),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'int resCount = flyRslvr.countResolutions(taxonId, identifier);\nif (resCount  = 1) {\n  LOG.info("RESOLVER: failed to resolve fly gene to one identifier, ignoring gene: "\n          + identifier + " count: " + resCount + " FBgn: "\n          + flyRslvr.resolveId(taxonId, identifier));\n  return null;\n}\n')),Object(l.b)("h2",{id:"writing-a-new-id-resolver"},"Writing a New ID resolver"),Object(l.b)("p",null,"An IdResolver factory will create an IdResolver which will read and parse data from a file or database containing identifier information, to save them to a Java map which will be written to a cached file."),Object(l.b)("p",null,"The new factory class needs to inherit super class IdResolverFactory:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"public class HumanIdResolverFactory extends IdResolverFactory\n")),Object(l.b)("p",null,"createIdResolver method:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// 1. check if the resolver which has the taxon and class has already been created\nresolver.hasTaxonAndClassName(taxonId, this.clsCol.iterator().next())\n\n// 2. Restore cached data from file. New data will be append to the cached file.\nboolean isCachedIdResolverRestored = restoreFromFile(); \n\n// 3. To implement reading and parsing data from a customized file/db, see createFromFile method and createFromDb method.\n")),Object(l.b)("p",null,"createFromFile method:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Ref HumanIdResolverFactory.java\n// Parse a tab delimited file. Add to resolver.\nString symbol = line[0];\n\nresolver.addMainIds(taxonId, symbol, Collections.singleton(symbol));\n")),Object(l.b)("p",null,"createFromDb method:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Ref FlyBaseIdResolverFactory.java\n// 1. Set db connection parameters in MINE.properties, scroll up to see flybase chado setting.\n// 2. Connect to the database and query the data.\n// 3. Parse ResultSet, addIdsFromResultSet method\n")),Object(l.b)("p",null,"Multiple taxon ids:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Ref EntrezGeneIdResolverFactory.java\npublic IdResolver getIdResolver(Set<String> taxonIds) {\n      if (taxonIds == null || taxonIds.isEmpty()) {\n          return null;\n      }\n      return getIdResolver(taxonIds, true);\n}\n")),Object(l.b)("p",null,"Multiple classes:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Ref FlyBaseIdResolverFactory.java\npublic FlyBaseIdResolverFactory(Set<String> clsCol) {\n    // clsCol is set in parent class IdResolverFactory.java  \n    this.clsCol = clsCol;\n}\n")),Object(l.b)("p",null,"Multiple files or mixture of file and db:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// We don't have an example to handle muliple files, but one can always add them and parse them one by one.\n// We have an example of handling db and file together, ref WormBaseIdResolverFactory.java\n")),Object(l.b)("p",null,"Add resolver factory to IdResolverService:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Ref IdResolverService.java\npublic static IdResolver getHumanIdResolver() {\n    return new HumanIdResolverFactory().getIdResolver(false);\n}\n\npublic static IdResolver getHumanIdResolver(boolean failOnError) {\n    return new HumanIdResolverFactory().getIdResolver(failOnError);\n}\n")),Object(l.b)("h2",{id:"future-plans"},"Future Plans"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"generalized resolver factory which will read a configuration file to be aware of identifier information by column. e.g. type=tab, column.0=mainId, etc.")))}s.isMDXComponent=!0}}]);