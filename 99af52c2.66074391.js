(window.webpackJsonp=window.webpackJsonp||[]).push([[295],{365:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return m}));var a=n(3),r=n(7),i=(n(0),n(549)),l={title:"Perl Items API"},c={unversionedId:"database/data-sources/apis/perl-items-api",id:"version-5.0.0/database/data-sources/apis/perl-items-api",isDocsHomePage:!1,title:"Perl Items API",description:'In the intermine/perl directory we provide a Perl library for creating files in InterMine "Item XML" format. Files in this format can be loaded into an InterMine database by creating a "source".',source:"@site/versioned_docs/version-5.0.0/database/data-sources/apis/perl-items-api.md",slug:"/database/data-sources/apis/perl-items-api",permalink:"/im-docs/docs/database/data-sources/apis/perl-items-api",editUrl:"https://github.com/intermine/im-docs/edit/master/versioned_docs/version-5.0.0/database/data-sources/apis/perl-items-api.md",version:"5.0.0",sidebar:"version-5.0.0/someSidebar",previous:{title:"Java Items API",permalink:"/im-docs/docs/database/data-sources/apis/java-items-api"},next:{title:"Python Items API",permalink:"/im-docs/docs/database/data-sources/apis/python-items-api"}},o=[{value:"Usage",id:"usage",children:[]},{value:"FlyMine example",id:"flymine-example",children:[]},{value:"Example",id:"example",children:[]}],s={toc:o};function m(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In the ",Object(i.b)("inlineCode",{parentName:"p"},"intermine/perl"),' directory we provide a Perl library for creating files in InterMine "Item XML" format. Files in this format can be loaded into an InterMine database by creating a "source".'),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("p",null,"Most code using these modules will follow this pattern:"),Object(i.b)("p",null,"Make a model"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-perl"}),"my $model = InterMine::Model->new(file => $model_file);\n")),Object(i.b)("p",null,"Make a new InterMine item XML document:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-perl"}),"my $document = InterMine::Item::Document->new(\n  model  => $model,\n  output => $out_file,\n);\n")),Object(i.b)("p",null,"Make an item:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-perl"}),'my $gene = $factory->make_item("Gene");\n')),Object(i.b)("p",null,"Set some attributes"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-perl"}),'$gene->set(identifier => "CG10811");\n')),Object(i.b)("p",null,"or references:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-perl"}),'my $org = $factory->make_item("Organism");\n$org->set(taxonId => 7227);\n$gene->set(organism => $org);\n')),Object(i.b)("p",null,"or collections:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-perl"}),"$gene->set(transcripts => [$transcript1, $transcript2]);\n")),Object(i.b)("p",null,"It is also possible to combine creation and attribute setting in one command:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-perl"}),"my $gene = $factory->make_item(\n  'Gene',\n  identifier  => 'CG10811',\n  organism    => $org,\n  transcripts => [$transcript1, $transcript2],\n);\n")),Object(i.b)("p",null,"Repeat step 4 as necessary then call ",Object(i.b)("inlineCode",{parentName:"p"},"$document->write")," to write the items to the output."),Object(i.b)("h2",{id:"flymine-example"},"FlyMine example"),Object(i.b)("p",null,"Example using the FlyMine model:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-perl"}),"use InterMine::Model;\nuse InterMine::Item::Document;\n\nmy $model_file = $ARGV[0] or die;\n\nmy $model   = InterMine::Model->new(file => $model_file);\nmy $document = InterMine::Item::Document->new(model => $model);\n\nmy $organism = $document->add_item(\n    'Organism',\n    taxonId => 7227,\n);\n\nmy $pub1 = $document->add_item(\n    'Publication',\n    pubMedId => 11700288,\n);\nmy $pub2 = $document->add_item(\n    'Publication',\n    pubMedId => 16496002,\n);\n\nmy $gene = $document->add_item(\n    'Gene',\n    identifier   => \"CG10811\",\n    organism     => $organism,\n    publications => [$pub1, $pub2]\n);\n\n# write as InterMine Items XML\n$document->write();\n")),Object(i.b)("p",null,"Output:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-markup"}),'<items>\n   <item id="0_4" class="" implements="Gene">\n      <attribute name="identifier" value="CG10811" />\n      <collection name="publications">\n         <reference ref_id="0_2" />\n         <reference ref_id="0_3" />\n      </collection>\n      <reference name="organism" ref_id="0_1" />\n   </item>\n   <item id="0_1" class="" implements="Organism">\n      <attribute name="taxonId" value="7227" />\n   </item>\n   <item id="0_2" class="" implements="Publication">\n      <attribute name="pubMedId" value="11700288" />\n   </item>\n   <item id="0_3" class="" implements="Publication">\n      <attribute name="pubMedId" value="16496002" />\n   </item>\n</items>\n')),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)("p",null,"In the InterMine ",Object(i.b)("inlineCode",{parentName:"p"},"scripts")," repository there is a longer example: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/intermine/intermine-scripts/blob/master/examples/intermine_items_example.pl"}),"intermine","_","items","_","example.pl")),Object(i.b)("p",null,"The script has three arguments:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"a string describing a ",Object(i.b)("inlineCode",{parentName:"li"},"DataSet")),Object(i.b)("li",{parentName:"ul"},"a taxon id"),Object(i.b)("li",{parentName:"ul"},"the path to a genomic model file")),Object(i.b)("p",null,"If you install XML::Writer, the script should run as:"),Object(i.b)("p",null,"Example command line:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-perl"}),'./intermine_items_example.pl \\"FlyMine\\" 5833 flymine/dbmodel/resources/main/genomic_model.xml\n')))}m.isMDXComponent=!0},549:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),m=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=m(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=m(n),u=a,d=p["".concat(l,".").concat(u)]||p[u]||b[u]||i;return n?r.a.createElement(d,c(c({ref:t},s),{},{components:n})):r.a.createElement(d,c({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var s=2;s<i;s++)l[s]=n[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);