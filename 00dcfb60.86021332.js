(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{547:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return d}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=o.a.createContext({}),l=function(e){var t=o.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=l(r),b=n,d=p["".concat(i,".").concat(b)]||p[b]||m[b]||a;return r?o.a.createElement(d,s(s({ref:t},c),{},{components:r})):o.a.createElement(d,s({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=b;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},66:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return s})),r.d(t,"toc",(function(){return u})),r.d(t,"default",(function(){return l}));var n=r(3),o=r(7),a=(r(0),r(547)),i={title:"Useful ObjectStore properties"},s={unversionedId:"database/performance/configuration",id:"version-5.0.0/database/performance/configuration",isDocsHomePage:!1,title:"Useful ObjectStore properties",description:"You can configure some parameters to update how queries are handled by setting these in your mine.properties file. If you do not, the default values will be used.",source:"@site/versioned_docs/version-5.0.0/database/performance/configuration.md",slug:"/database/performance/configuration",permalink:"/im-docs/docs/database/performance/configuration",editUrl:"https://github.com/intermine/im-docs/edit/master/versioned_docs/version-5.0.0/database/performance/configuration.md",version:"5.0.0",sidebar:"version-5.0.0/someSidebar",previous:{title:"Query performance (precomputed tables)",permalink:"/im-docs/docs/database/performance/precomputing"},next:{title:"BlueGenes",permalink:"/im-docs/docs/webapp/bluegenes/index"}},u=[{value:"os.query.max-query-parse-time",id:"osquerymax-query-parse-time",children:[]},{value:"os.query.max-time",id:"osquerymax-time",children:[]},{value:"os.query.max-limit",id:"osquerymax-limit",children:[]},{value:"os.query.max-offset",id:"osquerymax-offset",children:[]},{value:"os.queue-len",id:"osqueue-len",children:[]}],c={toc:u};function l(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"You can configure some parameters to update how queries are handled by setting these in your mine.properties file. If you do not, the default values will be used."),Object(a.b)("h2",{id:"osquerymax-query-parse-time"},"os.query.max-query-parse-time"),Object(a.b)("p",null,"InterMine includes a cost-based query optimiser that attempts to rewrite SQL queries to make use of precomputed tables. This involved parsing SQL strings into a Java representation, which is normally very fast but if multiple OR constraints are found in large queries, can be slow."),Object(a.b)("p",null,"There is a timeout to prevent query parsing from taking too long, if the time is exceeded a query will run as normal without possible optimisation. The default can be overridden by setting ",Object(a.b)("inlineCode",{parentName:"p"},"os.query.max-query-parse-time")," in ",Object(a.b)("inlineCode",{parentName:"p"},"*mine.properties")," to an integer value defining a number of milliseconds."),Object(a.b)("p",null,"Used in ",Object(a.b)("inlineCode",{parentName:"p"},"QueryOptimiserContext.java"),"."),Object(a.b)("h2",{id:"osquerymax-time"},"os.query.max-time"),Object(a.b)("p",null,"When the query is executed, via ",Object(a.b)("inlineCode",{parentName:"p"},"ObjectStoreInterMineImpl.executeWithConnection()"),", ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.postgresql.org/docs/9.1/static/sql-explain.html"}),"SQL EXPLAIN")," is run on the generated query. If the estimated time to complete the query is more than the ",Object(a.b)("inlineCode",{parentName:"p"},"max-time")," parameter set, the query will fail."),Object(a.b)("p",null,"Defaults to 100000000 milliseconds."),Object(a.b)("h2",{id:"osquerymax-limit"},"os.query.max-limit"),Object(a.b)("p",null,"When the query is executed, via ",Object(a.b)("inlineCode",{parentName:"p"},"ObjectStoreInterMineImpl.executeWithConnection()"),", ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.postgresql.org/docs/9.1/static/sql-explain.html"}),"SQL EXPLAIN")," is run on the generated query. If the estimated number of rows is more than the ",Object(a.b)("inlineCode",{parentName:"p"},"max-limit")," parameter set, the query will fail."),Object(a.b)("p",null,"Note this relies on Postgres's statistics being up to date and correct, be sure to run ",Object(a.b)("inlineCode",{parentName:"p"},"ANALYSE"),"."),Object(a.b)("p",null,"Defaults to 100000000 rows."),Object(a.b)("h2",{id:"osquerymax-offset"},"os.query.max-offset"),Object(a.b)("p",null,"Sets the maximum number of rows available to export."),Object(a.b)("p",null,"If the offset for a query is greater than the ",Object(a.b)("inlineCode",{parentName:"p"},"os.query.max-offset"),", the query will fail to run. See ",Object(a.b)("inlineCode",{parentName:"p"},"TableExportAction.checkTable()")," for the exact ExportException used."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'// exception thrown in TableExportAction.checkTable()\nif (pt.getExactSize() > pt.getMaxRetrievableIndex()) {\n    throw new ExportException("Result is too big for export. "\n        + "Table for export can have at the most "\n        + pt.getMaxRetrievableIndex() + " rows.");\n}\n')),Object(a.b)("p",null,"Defaults to 100000000 rows."),Object(a.b)("h2",{id:"osqueue-len"},"os.queue-len"),Object(a.b)("p",null,"<","obsolete",">"))}l.isMDXComponent=!0}}]);