(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{233:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(7),r=(n(0),n(549)),o={title:"elastic-med"},c={unversionedId:"embedding/apps-c/elastic-med",id:"version-4.0.0/embedding/apps-c/elastic-med",isDocsHomePage:!1,title:"elastic-med",description:"Note",source:"@site/versioned_docs/version-4.0.0/embedding/apps-c/elastic-med.md",slug:"/embedding/apps-c/elastic-med",permalink:"/im-docs/docs/4.0.0/embedding/apps-c/elastic-med",editUrl:"https://github.com/intermine/im-docs/edit/master/versioned_docs/version-4.0.0/embedding/apps-c/elastic-med.md",version:"4.0.0",sidebar:"version-4.0.0/someSidebar",previous:{title:"publication-search",permalink:"/im-docs/docs/4.0.0/embedding/apps-c/publication-search"},next:{title:"InterMine JavaScript API Loader",permalink:"/im-docs/docs/4.0.0/embedding/api-loader"}},l=[{value:"Initialize Project",id:"initialize-project",children:[{value:"Node.js platform",id:"nodejs-platform",children:[]},{value:"Bower vendor dependencies",id:"bower-vendor-dependencies",children:[]},{value:"Grunt building",id:"grunt-building",children:[]}]},{value:"ElasticSearch",id:"elasticsearch",children:[{value:"Start ElasticSearch",id:"start-elasticsearch",children:[]},{value:"Load example publications",id:"load-example-publications",children:[]}]},{value:"Source files",id:"source-files",children:[{value:"Example page",id:"example-page",children:[]},{value:"App index",id:"app-index",children:[]},{value:"Router",id:"router",children:[]},{value:"Pages templates",id:"pages-templates",children:[]},{value:"Application search template",id:"application-search-template",children:[]},{value:"Application search component",id:"application-search-component",children:[]}]}],s={toc:l};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note"),"\n@in-progress"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note"),"\nYou can view the source files for this project in the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/intermine/intermine-apps-c/tree/master/elastic-med"}),"intermine/intermine-apps-c")," repo."),Object(r.b)("p",null,"This document will guide you through the process of writing a JavaScript client side app ","(","running completely in a browser",")"," using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://bower.io/"}),"Bower")," and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://gruntjs.com/"}),"Grunt")," tools. The app will connect to an ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.elasticsearch.org/"}),"ElasticSearch")," ","(","ES",")"," instance to do ",Object(r.b)("em",{parentName:"p"},"search"),". ES wraps Apache Lucene and serves as a repository of indexed documents that one can search against. If you prefer a short gist head over to ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/im-docs/docs/4.0.0/embedding/apps-c/usage"}),"Apps/C Usage")," instead."),Object(r.b)("p",null,"The app will have the following functionalities:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Work with ",Object(r.b)("em",{parentName:"li"},"cancer")," related publications from PubMed."),Object(r.b)("li",{parentName:"ol"},"Ask user for an input text and get back a list of publications."),Object(r.b)("li",{parentName:"ol"},"Click on any of the results to see a detailed view."),Object(r.b)("li",{parentName:"ol"},"Detailed search for publications ",Object(r.b)("em",{parentName:"li"},"like")," this one from the document."),Object(r.b)("li",{parentName:"ol"},"Autocomplete and provide suggestions for user's input.")),Object(r.b)("p",null,"Among the important libraries we will be using:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"http://bower.io/"}),"Bower")," to fetch vendor dependencies such as JavaScript, CSS or Fonts."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"http://canjs.com/"}),"canJS")," is a framework for client-side development handling routing, events etc."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"http://coffeescript.org/"}),"CoffeeScript")," is a language that compiles down to JavaScript and makes writing an app easier."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"http://d3js.org/"}),"D3")," is used to manipulate documents based on data."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"http://www.elasticsearch.org/"}),"ElasticSearch")," is a search server with a RESTful web service peddling JSON documents."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"http://foundation.zurb.com/"}),"Foundation")," is a CSS framework of reusable UI components."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"http://gruntjs.com/"}),"Grunt")," to build/transpile our source files."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"http://jquery.com/"}),"jQuery")," is a DOM manipulation library ","(","and more",")","."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"http://momentjs.com/"}),"Moment")," is a date library for parsing, manipulating and formatting dates."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"http://mustache.github.io/"}),"Mustache")," is a multi-platform templating language allowing us to embed dynamic objects in HTML."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"http://en.wikipedia.org/wiki/Nodejs"}),"Node")," is a JavaScript desktop software platform."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"http://learnboost.github.io/stylus/"}),"Stylus")," allows us to be more expressive and dynamic with CSS."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"http://underscorejs.org/"}),"Underscore")," is a utility toolbelt making actions such as iterating over items easier.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Warning"),"\nSome of the code block examples on this page feature line numbers. Please view the page in a widescreen mode."),Object(r.b)("h2",{id:"initialize-project"},"Initialize Project"),Object(r.b)("p",null,"The first step will be to setup our directory structure."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"build/")),Object(r.b)("p",null,"Will be the directory where our final app package will live. We will develop in languages like Stylus or CoffeeScript and need a way to package all these resources into one whole directory. This is where all these files will live."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"bower","_","components/")),Object(r.b)("p",null,"This directory will be automatically created and will contain libraries we have requested through the Bower system."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"data/")),Object(r.b)("p",null,"Is a directory where we can keep data files that we will load to ES later."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"example/")),Object(r.b)("p",null,"Contains an example of our app in use."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"src/")),Object(r.b)("p",null,"Source files that our code will consist of."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"bower.json")),Object(r.b)("p",null,"Will contain a listing of libraries we want to download using Bower."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"package.json")),Object(r.b)("p",null,"Lists libraries we will need to compile and build our app."),Object(r.b)("h3",{id:"nodejs-platform"},"Node.js platform"),Object(r.b)("p",null,"Since our application is targeting JavaScript in the browser, it is pretty useful if we use JavaScript on our computer ","(","desktop",")"," too. Enter ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://en.wikipedia.org/wiki/Nodejs"}),"Node"),", which allows us to execute JavaScript on our computers instead of just on our browsers."),Object(r.b)("p",null,"You can fetch ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://nodejs.org/download/"}),"binaries")," from the homepage or use your ","(","hopefully Linux",")"," ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager"}),"packman"),"."),Object(r.b)("p",null,"Once Node is installed, edit the ",Object(r.b)("inlineCode",{parentName:"p"},"package.json")," file like so:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'{\n    "name": "elastic-med",\n    "version": "0.0.0",\n    "devDependencies": {\n        "bower": "~1.2.7",\n        "grunt": "~0.4.1",\n\n        "grunt-apps-c": "0.1.10",\n        "grunt-contrib-concat": "~0.3.0",\n        "grunt-contrib-stylus": "~0.9.0",\n        "grunt-contrib-copy": "0.4.1",\n\n        "grunt-contrib-uglify": "~0.2.5",\n        "grunt-contrib-cssmin": "~0.6.2",\n\n        "elasticsearch": "1.0.1",\n        "coffee-script": "1.6.3",\n        "async": "0.2.9",\n        "lodash": "2.4.1"\n    }\n}\n')),Object(r.b)("p",null,"This file tells Node which libraries will be used to build our app. These are not client-side libraries, but server-side if you will."),Object(r.b)("p",null,"The top bit of the ",Object(r.b)("inlineCode",{parentName:"p"},"devDependencies")," lists a bunch of Grunt and Bower related libraries while the bottom one ","(","line 17 onward",")"," lists some libraries used to load ES with data."),Object(r.b)("p",null,"In order to install all of these, execute the following:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ npm install -d\n")),Object(r.b)("h3",{id:"bower-vendor-dependencies"},"Bower vendor dependencies"),Object(r.b)("p",null,"Now we want to fetch libraries that our app, when running, will depend on."),Object(r.b)("p",null,"Edit the ",Object(r.b)("inlineCode",{parentName:"p"},"bower.json")," file like so:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'{\n    "name": "elastic-med",\n    "version": "0.0.0",\n    "dependencies": {\n        "jquery": "2.0.3",\n        "lodash": "2.4.1",\n        "canjs": "2.0.4",\n        "elasticsearch": "http://cdn.intermine.org/js/elasticsearch.js/1.0.2/elasticsearch.jquery.js",\n        "moment": "2.4.0",\n        "d3": "3.3.13",\n        "colorbrewer": "1.0.0",\n        "hint.css": "1.3.1",\n        "foundation": "5.0.2",\n        "font-awesome": "4.0.3",\n        "simple-lru": "~0.0.2"\n    }\n}\n')),Object(r.b)("p",null,"The file has a bunch of key-value pairs."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"name")),Object(r.b)("p",null,"Name of our application in the Bower ecosystem, required."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"version")),Object(r.b)("p",null,"Version number in the Bower ecosystem, required."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"dependencies")),Object(r.b)("p",null,"Lists the actual libraries and their versions to fetch. You can populate this list by executing ",Object(r.b)("inlineCode",{parentName:"p"},"$ bower install jquery --save")," for example. This will download the latest version of the ",Object(r.b)("inlineCode",{parentName:"p"},"jquery")," component into the ",Object(r.b)("inlineCode",{parentName:"p"},"bower_components/")," directory. You can ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://sindresorhus.com/bower-components/"}),"search")," for available components using ",Object(r.b)("inlineCode",{parentName:"p"},"$ bower search jquery"),". To actually trigger a search, execute ",Object(r.b)("inlineCode",{parentName:"p"},"$ bower install"),". The different libraries will be introduced as we code along."),Object(r.b)("h3",{id:"grunt-building"},"Grunt building"),Object(r.b)("p",null,"Grunt is used to munge files together and execute commands on them. Create a file called ",Object(r.b)("inlineCode",{parentName:"p"},"Gruntfile.coffee"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffeescript"}),"module.exports = (grunt) ->\n    grunt.initConfig\n        pkg: grunt.file.readJSON(\"package.json\")\n\n        apps_c:\n            commonjs:\n                src: [ 'src/**/*.{coffee,mustache}' ]\n                dest: 'build/js/em.js'\n                options:\n                    main: 'src/app.coffee'\n                    name: 'em'\n\n        stylus:\n            compile:\n                src: [ 'src/styles/app.styl' ]\n                dest: 'build/css/em.css'\n\n        concat:            \n            scripts:\n                src: [\n                    # Vendor dependencies.\n                    'bower_components/jquery/jquery.js'\n                    'bower_components/lodash/dist/lodash.js'\n                    'bower_components/canjs/can.jquery-2.js'\n                    'bower_components/canjs/can.map.setter.js'\n                    'bower_components/elasticsearch/index.js'\n                    'bower_components/moment/moment.js'\n                    'bower_components/colorbrewer/colorbrewer.js'\n                    'bower_components/d3/d3.js'\n                    'bower_components/simple-lru/index.js'\n                    # Our app.\n                    'build/js/em.js'\n                ]\n                dest: 'build/js/em.bundle.js'\n                options:\n                    separator: ';' # for minification purposes\n\n            styles:\n                src: [\n                    'bower_components/foundation/css/normalize.css'\n                    'bower_components/foundation/css/foundation.css'\n                    'bower_components/hint.css/hint.css'\n                    'bower_components/font-awesome/css/font-awesome.css'\n                    'src/styles/fonts.css'\n                    'build/css/em.css'\n                ]\n                dest: 'build/css/em.bundle.css'\n\n        copy:\n            fonts:\n                src: [ 'bower_components/font-awesome/fonts/*' ]\n                dest: 'build/fonts/'\n                expand: yes\n                flatten: yes\n\n        uglify:\n            scripts:\n                files:\n                    'build/js/em.min.js': 'build/js/em.js'\n                    'build/js/em.bundle.min.js': 'build/js/em.bundle.js'\n\n        cssmin:\n            combine:\n                files:\n                    'build/css/em.bundle.min.css': 'build/css/em.bundle.css'\n                    'build/css/em.min.css': 'build/css/em.css'\n\n    grunt.loadNpmTasks('grunt-apps-c')\n    grunt.loadNpmTasks('grunt-contrib-stylus')\n    grunt.loadNpmTasks('grunt-contrib-concat')\n    grunt.loadNpmTasks('grunt-contrib-copy')\n    grunt.loadNpmTasks('grunt-contrib-uglify')\n    grunt.loadNpmTasks('grunt-contrib-cssmin')\n\n    grunt.registerTask('default', [\n        'apps_c'\n        'stylus'\n        'concat'\n        'copy'\n    ])\n\n    grunt.registerTask('minify', [\n        'uglify'\n        'cssmin'\n    ])\n")),Object(r.b)("p",null,"This file is written in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://coffeescript.org/"}),"CoffeeScript")," and lists the tasks to run when we want to build our app. From the top:"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"apps","_","c")),Object(r.b)("p",null,"This directive says that we want to take any ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://coffeescript.org/"}),"CoffeeScript")," and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://mustache.github.io/"}),"Mustache")," files we find in ",Object(r.b)("inlineCode",{parentName:"p"},"src/")," and make them into one JavaScript package."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"stylus")),Object(r.b)("p",null,"Take a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://learnboost.github.io/stylus/"}),"Stylus")," file and turn it into CSS."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"concat")),Object(r.b)("p",null,"Take our vendor files ","(","installed using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://bower.io/"}),"Bower"),")"," and, together with our app, make them into a bundle. If someone else wants to use our app, they need our app and its deps too, so this one file will do it for them. Do the same to CSS too."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"copy")),Object(r.b)("p",null,"A task that copies fonts from ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://fontawesome.io/"}),"FontAwesome")," into our build directory."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"uglify")),Object(r.b)("p",null,"Minify our built JavaScript files. This makes them small but unreadable, so, not great for debugging."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"cssmin")),Object(r.b)("p",null,"The same as ",Object(r.b)("inlineCode",{parentName:"p"},"uglify"),", but for CSS"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Lines 76 and 83")," have two calls to ",Object(r.b)("inlineCode",{parentName:"p"},"grunt.registerTask")," which bundle a bunch of tasks together. For example, running ",Object(r.b)("inlineCode",{parentName:"p"},"$ grunt minify")," will run the ",Object(r.b)("inlineCode",{parentName:"p"},"uglify")," and ",Object(r.b)("inlineCode",{parentName:"p"},"cssmin")," tasks."),Object(r.b)("p",null,"While developing, it is quite useful to watch the source files and re-run the build task:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ watch --color grunt\n")),Object(r.b)("p",null,"This will run the default Grunt task every 2s."),Object(r.b)("h2",{id:"elasticsearch"},"ElasticSearch"),Object(r.b)("h3",{id:"start-elasticsearch"},"Start ElasticSearch"),Object(r.b)("p",null,"ES will hold our index of publications, ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.elasticsearch.org/download/"}),"fetch")," it and then unpack it somewhere."),Object(r.b)("p",null,"To start it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ ./bin/elasticsearch\n")),Object(r.b)("p",null,"Check that it is up by visiting port ",Object(r.b)("inlineCode",{parentName:"p"},"9200"),". If you see a JSON message, it is up."),Object(r.b)("h3",{id:"load-example-publications"},"Load example publications"),Object(r.b)("p",null,"To index some documents, you can use any ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.elasticsearch.org/guide/"}),"client"),". I was using the JavaScript one and if you check the ",Object(r.b)("inlineCode",{parentName:"p"},"data/")," dir in ",Object(r.b)("inlineCode",{parentName:"p"},"elastic-med")," on ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/"}),"GitHub"),", you will be able to see one way that documents can be indexed. In that example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ ./node_modules/.bin/coffee ./data/index.coffee\n")),Object(r.b)("p",null,"That will index ","(","after a few seconds",")"," 1000 cancer publications found in ",Object(r.b)("inlineCode",{parentName:"p"},"cancer.json"),"."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"convert.coffee")," file was used to convert source XML to JSON."),Object(r.b)("p",null,"Check that documents got indexed by visiting the document URL in the browser."),Object(r.b)("p",null,"You should get back a JSON document, provided you are using index ",Object(r.b)("inlineCode",{parentName:"p"},"publications"),", type ",Object(r.b)("inlineCode",{parentName:"p"},"publication")," and you have a document under the id ",Object(r.b)("inlineCode",{parentName:"p"},"438"),"."),Object(r.b)("h2",{id:"source-files"},"Source files"),Object(r.b)("h3",{id:"example-page"},"Example page"),Object(r.b)("p",null,"One needs an access point where our app will get loaded with particular configuration. This is where the ",Object(r.b)("inlineCode",{parentName:"p"},"example/index.html")," comes in:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-markup"}),"<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>ElasticMed</title>\n\n    <link href=\"build/css/em.bundle.css\" media=\"all\" rel=\"stylesheet\" type=\"text/css\" />\n    <script src=\"build/js/em.bundle.js\"><\/script>\n</head>\n<body>\n    <div id=\"app\"></div>\n    <script>\n        // Once scripts have loaded.\n        $(function() {\n            // ...show the app.\n            require('em')({\n                'el': '#app',\n                'service': 'http://newvegas:9200',\n                'index':   'publications',\n                'type':    'publication',\n                'query':   'breast size exercise cancer'\n            });\n        });\n    <\/script>\n</body>\n</html>\n")),Object(r.b)("p",null," This file does not do anything else other then load our built CSS and JS files ","(",Object(r.b)("em",{parentName:"p"},"lines 7 and 9"),")"," and starts our app. In our example, we are pointing to a ",Object(r.b)("inlineCode",{parentName:"p"},"build")," directory relative to the ",Object(r.b)("inlineCode",{parentName:"p"},"example")," directory. So let\u2019s make a symbolic link to the actual ",Object(r.b)("inlineCode",{parentName:"p"},"build"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ ln -s ../build build/\n")),Object(r.b)("p",null,"Such links get preserved when version controlling using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://git-scm.com/"}),"Git"),". We are linking to our bundled builds that contain vendor dependencies too."),Object(r.b)("p",null,"Then we are waiting for the page to load and call our ","(","future",")"," app with some config."),Object(r.b)("p",null,"The name ",Object(r.b)("inlineCode",{parentName:"p"},"em")," is being configured in the ",Object(r.b)("inlineCode",{parentName:"p"},"Gruntfile.coffee")," file in the ",Object(r.b)("inlineCode",{parentName:"p"},"apps-c")," task."),Object(r.b)("p",null,"As for the config:"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"el")),Object(r.b)("p",null,"Selector where our app should be displayed."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"service")),Object(r.b)("p",null,"Points to the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.elasticsearch.org/"}),"ES")," endpoint. By default it starts on port ",Object(r.b)("inlineCode",{parentName:"p"},"9200"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"index")),Object(r.b)("p",null,"Refers to the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.elasticsearch.org/"}),"ES")," index we are using."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"type")),Object(r.b)("p",null,"Refers to the type of ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.elasticsearch.org/"}),"ES")," documents we are storing in our index."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"query")),Object(r.b)("p",null,"Is a default query we will want to show when our app loads."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"require")," call on ",Object(r.b)("em",{parentName:"p"},"line 17")," relates to ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://addyosmani.com/writing-modular-js/"}),"CommonJS"),". It is one way of loading JavaScript modules. It avoids having to expose all of our functions and objects on the global ","(",Object(r.b)("inlineCode",{parentName:"p"},"window"),")"," object and implements a way of relating between different files."),Object(r.b)("h3",{id:"app-index"},"App index"),Object(r.b)("p",null,"We have asked to load an app in our ",Object(r.b)("inlineCode",{parentName:"p"},"example/index.html")," page, now we are going to write the backing code."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"apps-c")," task ","(","in ",Object(r.b)("inlineCode",{parentName:"p"},"Gruntfile.coffee"),")"," contains the following two options:"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"name")),Object(r.b)("p",null,"How do we call our app for ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://addyosmani.com/writing-modular-js/"}),"CommonJS")," ",Object(r.b)("inlineCode",{parentName:"p"},"require")," call?"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"main")),Object(r.b)("p",null,"Contains a path ","(","an index",")"," that will be called when we actually call the ",Object(r.b)("inlineCode",{parentName:"p"},"require")," function."),Object(r.b)("p",null,"We have specified that our app index lives in ",Object(r.b)("inlineCode",{parentName:"p"},"src/app.coffee"),", so let's create this file:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffeescript"}),"module.exports = (opts) ->\n    # Explode ejs options.\n    { service, index, type } = opts\n\n    # Init the ejs client.\n    ejs.attr { index, type, 'client': new $.es.Client({ 'hosts': service }) }\n\n    # Start routing.\n    new Routing opts.el\n    do can.route.ready\n\n    # Have we launched on the index?\n    if can.route.current('')\n        # Manually change the query to init the search.\n        query.attr 'current', opts.query or '' # '' is the default...\n")),Object(r.b)("p",null,"Each module ","(","file",")"," in our app needs to export some functionality. When we call ",Object(r.b)("inlineCode",{parentName:"p"},"require")," we will be getting this functionality."),Object(r.b)("p",null,"We are going to be using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://canjs.com/"}),"canJS")," which consists of objects that can be ",Object(r.b)("em",{parentName:"p"},"observed"),". What this means is that when their values change, others listening to this changes will be notified. When we want to ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://canjs.com/docs/can.Map.prototype.attr.html"}),"change")," their value, we call ",Object(r.b)("inlineCode",{parentName:"p"},"attr")," function on them. One such example is on ",Object(r.b)("em",{parentName:"p"},"line 7")," where we change the value of ",Object(r.b)("inlineCode",{parentName:"p"},"index"),", ",Object(r.b)("inlineCode",{parentName:"p"},"type")," and ",Object(r.b)("inlineCode",{parentName:"p"},"client")," as passed in by the user from ",Object(r.b)("inlineCode",{parentName:"p"},"example/index.html"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"$.es.Client")),Object(r.b)("p",null,"Refers to ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.elasticsearch.org/"}),"ElasticSearch")," client in JavaScript which we have installed using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://bower.io/"}),"Bower")," and munged in a bundle using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://gruntjs.com/"}),"Grunt")," as specified in ",Object(r.b)("inlineCode",{parentName:"p"},"Gruntfile.coffee"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Routing","(",")")),Object(r.b)("p",null,"Is a call to a future ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://canjs.com/guides/Controls.html"}),"canControl")," component which will setup our routing. We need a way to change between an index page that does search and a detail page that shows a detail."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"can.route.ready")),Object(r.b)("p",null,"Actually tells ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://canjs.com/"}),"canJS")," to start listening to changes in the browser address."),Object(r.b)("p",null,"On ",Object(r.b)("em",{parentName:"p"},"line 14"),", we see an example of checking whether we are looking at the index page when the app loads. If so, we are changing a ",Object(r.b)("inlineCode",{parentName:"p"},"current")," attribute on a ","(","future",")"," ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://canjs.com/docs/can.Map.html"}),"canMap")," component which will correspond to the query, meaning user query input. Our ",Object(r.b)("inlineCode",{parentName:"p"},"example/index.html")," page contains an example query to use in this case."),Object(r.b)("h3",{id:"router"},"Router"),Object(r.b)("p",null," Now we need to write the actual router component. It will be a type of ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://canjs.com/guides/Controls.html"}),"canControl")," and lives in the ",Object(r.b)("inlineCode",{parentName:"p"},"src/app.coffee")," file too. Since we do not want/need to export this functionality, it will be placed above the current ",Object(r.b)("inlineCode",{parentName:"p"},"module.exports")," call:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffeescript"}),"# Router switching between pages.\nRouting = can.Control\n\n    init: ->\n        # Load the components.\n        ( require \"./components/#{name}\" for name in components )\n\n        # Setup the UI.\n        layout = require './templates/layout'\n        @element.html render layout, helpers\n\n    # Index.\n    route: ->\n        template = require './templates/page/index'\n        @render(template, {}, 'ElasticMed')\n\n    # Document detail.\n    'doc/:oid route': ({ oid }) ->\n        fin = (doc) =>\n            template = require './templates/page/detail'\n            return @render(template, {}, 'ElasticMed') unless doc\n\n            title = title.value if _.isObject title = doc.attr('title')\n            @render template, doc, \"#{title} - ElasticMed\"\n\n        # Find the document.\n        doc = null\n        # Is it in results?\n        if (docs = results.attr('docs')).length\n            docs.each (obj) ->\n                # Found already?\n                return if doc\n                # Match on oid.\n                doc = obj if obj.attr('oid') is oid\n\n        # Found in results cache.\n        return fin(doc) if doc\n\n        # Get the document from the index.\n        ejs.get oid, (err, doc) ->\n            # Trouble?\n            state.error err.message if err\n            # Finish with either a document or nothing\n            #  in which case (error will be shown).\n            fin doc\n\n    # Render a page. Update the page title.\n    render: (template, ctx, title) ->\n        @element.find('.content')\n        .html(render(template, ctx))\n        # Update title.\n        document.title = title\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"init")),Object(r.b)("p",null,"We are loading some components that we are using in this app into the memory and then rendering our app layout. This layout will setup the structure for our whole app."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"route")),Object(r.b)("p",null,"Is a function that will be called when we are on the index page of the app. It renders the index page template."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"doc/:oid route")),Object(r.b)("p",null,"Matches when we are looking at a detail of a document/publication. So, if someone manually types in the address ",Object(r.b)("inlineCode",{parentName:"p"},"#!doc/438")," or it changes as a result of user interaction, this function gets called. We are either retrieving the document from a results cache or we are explicitly calling for a document from ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.elasticsearch.org/"}),"ElasticSearch"),". Consider that when we search for documents, we get their content too so we do not need to fetch them again when looking at their ",Object(r.b)("em",{parentName:"p"},"detail"),". In contrast, someone could type in a random document address and we need to be ready for that. In either case we are calling the ",Object(r.b)("inlineCode",{parentName:"p"},"fin")," function on ",Object(r.b)("em",{parentName:"p"},"line 19")," to render the results."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"render")),Object(r.b)("p",null,"Serves as a helper we have created that injects a template into the DOM and updates the page title."),Object(r.b)("h3",{id:"pages-templates"},"Pages templates"),Object(r.b)("p",null,"When discussing the router, we talked about different page templates. Let us define them now. In ",Object(r.b)("inlineCode",{parentName:"p"},"src/templates/page/index.mustache"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),'<p>ElasticSearch through a collection of cancer related publications from PubMed. Use <kbd>Tab</kbd> to autocomplete or <kbd>Enter</kbd> to search.</p>\n<div class="page index">\n    <app-search></app-search>\n    <app-state></app-state>\n    <app-results></app-results>\n</div>\n')),Object(r.b)("p",null,"This is the index template with three custom tags corresponding to different components:"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"app-search")),Object(r.b)("p",null,"the search form"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"app-state")),Object(r.b)("p",null,"notification messages/titles"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"app-results")),Object(r.b)("p",null,"the results when our search is successful"),Object(r.b)("p",null,"Now for the template that gets rendered on a detail page, in ",Object(r.b)("inlineCode",{parentName:"p"},"src/templates/page/detail.mustache"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),'<div class="page detail">\n    <app-state></app-state>\n    {{ #oid }}\n    <div class="document detail">\n        <app-document link-to-detail="false" show-keywords="true"></app-document>\n    </div>\n    <app-more></app-more>\n    {{ /oid }}\n<div>\n')),Object(r.b)("p",null,"We see that ",Object(r.b)("inlineCode",{parentName:"p"},"app-state")," is present, it will tell us when a doc is not found. If it is ","(","we have a document ",Object(r.b)("inlineCode",{parentName:"p"},"oid"),")"," we show the rest of the page."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"app-document")),Object(r.b)("p",null,"Is the view of one document. We are passing extra parameters ","(","options",")"," into the context saying we don't want to link to the detail page ","(","we are on detail page",")"," but we want to show keywords ","(","which will not be shown on the index results set",")","."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"app-more")),Object(r.b)("p",null,"Is a results set similar to ",Object(r.b)("inlineCode",{parentName:"p"},"app-results")," which corresponds to a component that will automatically search for and display documents that are similar like ",Object(r.b)("em",{parentName:"p"},"this one"),"."),Object(r.b)("h3",{id:"application-search-template"},"Application search template"),Object(r.b)("p",null,"This template will be rendered for the ",Object(r.b)("inlineCode",{parentName:"p"},"app-search")," component defined on the index page. In ",Object(r.b)("inlineCode",{parentName:"p"},"src/templates/search.mustache"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),'<div class="row collapse">\n    <div class="large-10 columns search">\n        <div class="faux"></div>\n        <input class="text" type="text" maxlength="100" placeholder="Query..." value="{{ query.current }}" autofocus>\n        {{ #if suggestions.list.length }}\n        <ul class="f-dropdown suggestions" style="left:{{ suggestions.px }}px">\n        {{ #suggestions.list }}\n            <li {{ #active }}class="active"{{ /active }}>\n                <a>{{ text }}</a>\n            </li>\n        {{ /suggestions.list }}\n        </ul>\n        {{ /if }}\n    </div>\n    <div class="large-2 columns">\n        <a class="button secondary postfix">\n            <span class="fa fa-search"></span> Search\n        </a>\n    </div>\n</div>\n{{ #if query.history.length }}\n<div class="row collapse">\n    <h4>History</h4>\n    <ul class="breadcrumbs">\n    {{ #query.history }}\n        <li><a>{{ . }}</a></li>\n    {{ /query.history }}\n</div>\n{{ /if }}\n')),Object(r.b)("p",null,"We are splitting the DOM into two parts. These parts have a ",Object(r.b)("inlineCode",{parentName:"p"},"row")," class on them representing the grid of the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://foundation.zurb.com/"}),"Foundation")," framework."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"div.search")),Object(r.b)("p",null,"The first part is split into two ",Object(r.b)("inlineCode",{parentName:"p"},"columns"),", one for the input field and the other for a button triggering search."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"div.faux")),Object(r.b)("p",null,"We will want to get caret position from the input field. To do that, we are going to get all of the text from the input field up to the caret position and then copy it over to a div that has the same CSS styling as us, but is invisible. Then we are going to get the width of ",Object(r.b)("inlineCode",{parentName:"p"},".faux"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"input.text")),Object(r.b)("p",null,"The place where input goes. We can see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://mustache.github.io/"}),"Mustache")," syntax here that outputs the value of the current query."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"ul.suggestions")),Object(r.b)("p",null,'Shows up when a list of suggestions has some items. Represents suggestions for the current word, hence the need to get the caret position. If some suggestions are "active" ',"(","we hover on them etc.",")"," then we toggle their CSS class."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"ul.breadcrumbs")),Object(r.b)("p",null,"A query history. Only shows up when it has items in it."),Object(r.b)("h3",{id:"application-search-component"},"Application search component"))}p.isMDXComponent=!0},549:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),p=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,m=b["".concat(o,".").concat(d)]||b[d]||u[d]||r;return n?i.a.createElement(m,c(c({ref:t},s),{},{components:n})):i.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<r;s++)o[s]=n[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);