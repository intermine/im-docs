(window.webpackJsonp=window.webpackJsonp||[]).push([[464],{535:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return b})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return s}));var n=a(3),r=a(7),o=(a(0),a(547)),i={title:"Chado"},b={unversionedId:"database/data-sources/library/chado",id:"version-5.0.0/database/data-sources/library/chado",isDocsHomePage:!1,title:"Chado",description:"We have developed an InterMine data source that can use a GMOD Chado database as a source for an InterMine warehouse. The eventual aim is to allow import of any Chado database with some configuration. This will provide a web environment to perform rapid, complex queries on Chado databases with minimal development effort.",source:"@site/versioned_docs/version-5.0.0/database/data-sources/library/chado.md",slug:"/database/data-sources/library/chado",permalink:"/im-docs/docs/database/data-sources/library/chado",editUrl:"https://github.com/intermine/im-docs/edit/master/versioned_docs/version-5.0.0/database/data-sources/library/chado.md",version:"5.0.0",sidebar:"version-5.0.0/someSidebar",previous:{title:"NCBI - Entrez gene",permalink:"/im-docs/docs/database/data-sources/library/ncbi-gene"},next:{title:"FASTA",permalink:"/im-docs/docs/database/data-sources/library/fasta"}},c=[{value:"Converter",id:"converter",children:[]},{value:"Chado tables",id:"chado-tables",children:[]},{value:"Default configuration",id:"default-configuration",children:[]},{value:"Converter configuration",id:"converter-configuration",children:[]},{value:"Source configuration",id:"source-configuration",children:[]},{value:"Sub-classing the converter",id:"sub-classing-the-converter",children:[]},{value:"Current uses",id:"current-uses",children:[]},{value:"Implementation notes for the chado-db source",id:"implementation-notes-for-the-chado-db-source",children:[{value:"Chado sequence module table processing",id:"chado-sequence-module-table-processing",children:[]}]},{value:"Using the default chado source",id:"using-the-default-chado-source",children:[]},{value:"Tripal",id:"tripal",children:[]}],l={toc:c};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"We have developed an InterMine data source that can use a GMOD Chado database as a source for an InterMine warehouse. The eventual aim is to allow import of any Chado database with some configuration. This will provide a web environment to perform rapid, complex queries on Chado databases with minimal development effort."),Object(o.b)("h2",{id:"converter"},"Converter"),Object(o.b)("p",null,"The converter for this source is the ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoDBConverter")," class. This class controls which ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoProcessors")," are run. A ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoProcessor")," class corresponds to a chado module. For example, the sequence module is processed by the ",Object(o.b)("inlineCode",{parentName:"p"},"SequenceProcessor")," and the stock module is processed by the ",Object(o.b)("inlineCode",{parentName:"p"},"StockProcessor"),"."),Object(o.b)("h2",{id:"chado-tables"},"Chado tables"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"chado-db")," source is able to integrate objects from a Chado database. Currently, only tables from the ",Object(o.b)("inlineCode",{parentName:"p"},"Chado sequence module")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Chado stock modules")," are read."),Object(o.b)("p",null,"These tables are queried from the chado database:"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"feature"))),Object(o.b)("p",null,"used to create objects in the ObjectStore"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The default configuration only supports features that have a Sequence Ontology type ","(","eg. ",Object(o.b)("inlineCode",{parentName:"li"},"gene"),", ",Object(o.b)("inlineCode",{parentName:"li"},"exon"),", ",Object(o.b)("inlineCode",{parentName:"li"},"chromosome"),")"),Object(o.b)("li",{parentName:"ul"},"Each new feature in InterMine will be a sub-class of ",Object(o.b)("inlineCode",{parentName:"li"},"SequenceFeature"),".")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"featureloc"))),Object(o.b)("p",null,"used to create ",Object(o.b)("inlineCode",{parentName:"p"},"Location")," objects to set ",Object(o.b)("inlineCode",{parentName:"p"},"chromosomeLocation")," reference in each ",Object(o.b)("inlineCode",{parentName:"p"},"SequenceFeature")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"feature_relationship"))),Object(o.b)("p",null,"used to find ",Object(o.b)("inlineCode",{parentName:"p"},"part_of")," relationships between features"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"this information is used to create parent-child references and collections"),Object(o.b)("li",{parentName:"ul"},"examples include setting the ",Object(o.b)("inlineCode",{parentName:"li"},"transcripts")," collection in the ",Object(o.b)("inlineCode",{parentName:"li"},"Exon")," objects and the ",Object(o.b)("inlineCode",{parentName:"li"},"gene")," reference in the ",Object(o.b)("inlineCode",{parentName:"li"},"Transcript")," class.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"dbxref")," and ",Object(o.b)("inlineCode",{parentName:"strong"},"feature_dbxref"))),Object(o.b)("p",null,"used to create ",Object(o.b)("inlineCode",{parentName:"p"},"Synonym")," objects for external identifiers of features"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"the ",Object(o.b)("inlineCode",{parentName:"li"},"Synonym`s will be added to the `synonyms")," collection of the relevant ",Object(o.b)("inlineCode",{parentName:"li"},"SequenceFeature"))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"featureprop"))),Object(o.b)("p",null,"used to set fields in features based on properties"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"an example from the FlyBase database: the ",Object(o.b)("inlineCode",{parentName:"li"},"SequenceFeature.cytoLocation")," field is set using the ",Object(o.b)("inlineCode",{parentName:"li"},"cyto_range")," feature","_","prop")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"synonym")," and ",Object(o.b)("inlineCode",{parentName:"strong"},"feature_synonym"))),Object(o.b)("p",null,"used to create extra ",Object(o.b)("inlineCode",{parentName:"p"},"Synonym")," objects for ",Object(o.b)("inlineCode",{parentName:"p"},"chado")," synonyms and to set fields in features"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"the ",Object(o.b)("inlineCode",{parentName:"li"},"Synonym`s will be added to the `synonyms")," collection of the relevant ",Object(o.b)("inlineCode",{parentName:"li"},"SequenceFeature"))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"cvterm")," and ",Object(o.b)("inlineCode",{parentName:"strong"},"feature_cvterm"))),Object(o.b)("p",null,"used to set fields in features and to create synonyms based on CV terms"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"pub"),", ",Object(o.b)("inlineCode",{parentName:"strong"},"feature_pub")," and ",Object(o.b)("inlineCode",{parentName:"strong"},"db"))),Object(o.b)("p",null,"used to set the ",Object(o.b)("inlineCode",{parentName:"p"},"publications")," collection in the new ",Object(o.b)("inlineCode",{parentName:"p"},"SequenceFeature")," objects."),Object(o.b)("p",null,"Additionally, the ",Object(o.b)("inlineCode",{parentName:"p"},"StockProcessor")," class reads the tables from the chado stock module, eg. stockcollection, stock, stock","_","genotype."),Object(o.b)("h2",{id:"default-configuration"},"Default configuration"),Object(o.b)("p",null,"The default configuration of ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoDBConverter")," is to query the ",Object(o.b)("inlineCode",{parentName:"p"},"feature")," table to only a limited list of types. The list can be changed by sub-classing the ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoDBConverter")," class and overriding the ",Object(o.b)("inlineCode",{parentName:"p"},"getFeatureList()")," method. The ",Object(o.b)("inlineCode",{parentName:"p"},"featureloc"),", ",Object(o.b)("inlineCode",{parentName:"p"},"feature_relationship")," and ",Object(o.b)("inlineCode",{parentName:"p"},"pub")," tables will then be queried to create locations, parent-child relationships and publications ","(","respectively",")","."),Object(o.b)("h2",{id:"converter-configuration"},"Converter configuration"),Object(o.b)("p",null,"Sub-classes can control how the Chado tables are used by overriding the ",Object(o.b)("inlineCode",{parentName:"p"},"getConfig()")," method and returning a configuration map."),Object(o.b)("h2",{id:"source-configuration"},"Source configuration"),Object(o.b)("p",null,"Example source configuration for reading from the ''C.elegans'' Chado database:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-markup"}),'<source name="chado-db-wormbase-c_elegans" type="chado-db" dump="true">\n  <property name="source.db.name" value="wormbase"/>\n  <property name="genus" value="Caenorhabditis"/>\n  <property name="species" value="elegans"/>\n  <property name="taxonId" value="6239"/>\n  <property name="dataSourceName" value="WormBase"/>\n  <property name="dataSetTitle" value="WormBase C.elegans data set"/>\n</source>\n')),Object(o.b)("h2",{id:"sub-classing-the-converter"},"Sub-classing the converter"),Object(o.b)("p",null,"The processor classes can be sub-classed to allow organism or database specific configuration. To do that, create your class ","(","perhaps in ",Object(o.b)("inlineCode",{parentName:"p"},"bio/sources/chado-db/main/src/"),")"," set the ",Object(o.b)("inlineCode",{parentName:"p"},"processors")," property in your source element. For example for reading the FlyBase Chado database there is a ",Object(o.b)("inlineCode",{parentName:"p"},"FlyBaseProcessor")," which can be configured like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-markup"}),'<source name="chado-db-flybase-dmel" type="chado-db">\n...\n    <property name="processors" value="org.intermine.bio.dataconversion.FlyBaseProcessor"/>\n...\n')),Object(o.b)("h2",{id:"current-uses"},"Current uses"),Object(o.b)("p",null,Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.flymine.org"}),"FlyMine")," uses the ",Object(o.b)("inlineCode",{parentName:"p"},"chado-db")," source for reading the ''Drosophila'' genomes from the FlyBase ",Object(o.b)("inlineCode",{parentName:"p"},"chado")," database. The ",Object(o.b)("inlineCode",{parentName:"p"},"FlyBaseProcessor")," sub-class is used for configuration and to handle FlyBase special cases."),Object(o.b)("p",null,Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://intermine.modencode.org"}),"modMine")," for the modENCODE project uses ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoDBSource")," for reading ''D. melanogaster'' from FlyBase and to read ''C. elegans'' data from the WormBase ",Object(o.b)("inlineCode",{parentName:"p"},"chado")," database. The ",Object(o.b)("inlineCode",{parentName:"p"},"WormBaseProcessor")," sub-class is used for configuration when reading from WormBase."),Object(o.b)("h2",{id:"implementation-notes-for-the-chado-db-source"},"Implementation notes for the chado-db source"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"chado-db")," source is implemented by the ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoDBConverter")," class which runs the ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoProcessor`s that have been configured in the `project.xml"),". The configuration looks like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-markup"}),'<source name="chado-db-some-database" type="chado-db">\n  ...\n  <property name="processors" value="org.intermine.bio.dataconversion.ChadoSequenceProcessor org.intermine.bio.dataconversion.StockProcessor"/>\n  ...\n')),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"ChadoDBConverter.process()")," will create an object for each ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoProcessor")," in turn, then call ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoProcessor.process()"),"."),Object(o.b)("h3",{id:"chado-sequence-module-table-processing"},"Chado sequence module table processing"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"ChadoSequenceProcessor")," processes the sequence module from Chado. The ",Object(o.b)("inlineCode",{parentName:"p"},"process()")," method handles each table in turn by calling: ",Object(o.b)("inlineCode",{parentName:"p"},"processFeatureTable(),")," ",Object(o.b)("inlineCode",{parentName:"p"},"processFeatureCVTermTable()")," etc."),Object(o.b)("p",null,"Each table processing method calls a result set method, eg. ",Object(o.b)("inlineCode",{parentName:"p"},"processFeatureTable()")," calls ",Object(o.b)("inlineCode",{parentName:"p"},"getFeatureTableResultSet()")," and then processes each row. The returned ",Object(o.b)("inlineCode",{parentName:"p"},"ResultSet")," may not always include all rows from the Chado table. For example the ",Object(o.b)("inlineCode",{parentName:"p"},"getFeatures()")," method returns a sub-set of the possible feature types and that list is used to when querying the feature table."),Object(o.b)("p",null,"Generally each row is made into an appropriate object, eg. in ",Object(o.b)("inlineCode",{parentName:"p"},"processFeatureTable()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"feature")," table rows correspond to ",Object(o.b)("inlineCode",{parentName:"p"},"BioEntity")," objects. Some rows of some tables are ignored ","(","i.e. not turned into objects",")"," based on configuration."),Object(o.b)("h4",{id:"reading-the-feature-table"},"Reading the feature table"),Object(o.b)("p",null,"Handled by ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoSequenceProcessor.processFeatureTable()")),Object(o.b)("p",null,"For each feature it calls: ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoSequenceProcessor.makeFeatureData()"),", which may be overridden by subclasses. If ",Object(o.b)("inlineCode",{parentName:"p"},"makeFeatureData()")," returns null ","(","eg. because the sub-class does not need that feature",")"," the row is discarded, otherwise processing of the feature continues."),Object(o.b)("p",null,"Based on the configuration, fields in the ",Object(o.b)("inlineCode",{parentName:"p"},"BioEntity")," are set using ",Object(o.b)("inlineCode",{parentName:"p"},"feature.uniquename")," and ",Object(o.b)("inlineCode",{parentName:"p"},"feature.name")," from Chado."),Object(o.b)("p",null,"If the ",Object(o.b)("inlineCode",{parentName:"p"},"residues")," column in the feature is set, create a ",Object(o.b)("inlineCode",{parentName:"p"},"Sequence")," object and add it to the new ",Object(o.b)("inlineCode",{parentName:"p"},"BioEntity"),"."),Object(o.b)("h4",{id:"reading-the-featureloc-table"},"Reading the featureloc table"),Object(o.b)("p",null,"Handled by ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoSequenceProcessor.processLocationTable()"),"."),Object(o.b)("p",null,"This method gets passed a result set with start position, end position and information from the ",Object(o.b)("inlineCode",{parentName:"p"},"featureloc")," table. For each row from the result set it will:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"store a ",Object(o.b)("inlineCode",{parentName:"li"},"Location")," object"),Object(o.b)("li",{parentName:"ul"},"set ",Object(o.b)("inlineCode",{parentName:"li"},"chromosomeLocation")," in the associated ",Object(o.b)("inlineCode",{parentName:"li"},"SequenceFeature")),Object(o.b)("li",{parentName:"ul"},"set the ",Object(o.b)("inlineCode",{parentName:"li"},"chromosome")," reference in the ",Object(o.b)("inlineCode",{parentName:"li"},"SequenceFeature")," if the ",Object(o.b)("inlineCode",{parentName:"li"},"srcfeature")," from the ",Object(o.b)("inlineCode",{parentName:"li"},"featureloc")," table is a chromosome feature")),Object(o.b)("h4",{id:"reading-the-feature_relationship-table"},"Reading the feature","_","relationship table"),Object(o.b)("p",null,"Handled by ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoSequenceProcessor.processRelationTable()"),"."),Object(o.b)("p",null,"This method calls ",Object(o.b)("inlineCode",{parentName:"p"},"getFeatureRelationshipResultSet()")," to return the relations of interest. The relations will be used to create references and collections."),Object(o.b)("p",null,"The method will automatically attempt to find and set the appropriate references and collections for ",Object(o.b)("inlineCode",{parentName:"p"},"part_of")," relations. As an example, if there is a ",Object(o.b)("inlineCode",{parentName:"p"},"part_of")," relation in the table between ",Object(o.b)("inlineCode",{parentName:"p"},"Gene")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Transcript")," and there ",Object(o.b)("inlineCode",{parentName:"p"},"Gene.transcript")," reference or a ",Object(o.b)("inlineCode",{parentName:"p"},"Gene.transcripts")," collection, it will be set."),Object(o.b)("p",null,"There are two modes of operation, controlled by the ",Object(o.b)("inlineCode",{parentName:"p"},"subjectFirst")," parameters. If true, order by the ",Object(o.b)("inlineCode",{parentName:"p"},"subject_id")," of the ",Object(o.b)("inlineCode",{parentName:"p"},"feature_relationship")," table so we get results like:"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:"left"})),Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:"left"})),Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:"left"})))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"gene1","_","feature","_","id"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"relation","_","type"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"protein1","_","feature","_","id")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"gene1","_","feature","_","id"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"relation","_","type"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"protein2","_","feature","_","id")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"gene2","_","feature","_","id"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"relation","_","type"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"protein1","_","feature","_","id")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"gene2","_","feature","_","id"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"relation","_","type"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"protein2","_","feature","_","id")))),Object(o.b)("p",null,"(","Assuming the unlikely case where two genes are related to two proteins",")"),Object(o.b)("p",null,"If ",Object(o.b)("inlineCode",{parentName:"p"},"subjectFirst")," is false we get results like:"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:"left"})),Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:"left"})),Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:"left"})))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"gene1","_","feature","_","id"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"relation","_","type"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"protein1","_","feature","_","id")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"gene2","_","feature","_","id"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"relation","_","type"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"protein1","_","feature","_","id")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"gene1","_","feature","_","id"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"relation","_","type"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"protein2","_","feature","_","id")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"gene2","_","feature","_","id"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"relation","_","type"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"protein2","_","feature","_","id")))),Object(o.b)("p",null,"The first case is used when we need to set a collection in the gene, the second if we need to set a collection in proteins."),Object(o.b)("h4",{id:"reading-the-cvterm-table"},"Reading the cvterm table"),Object(o.b)("p",null,"Handled by ",Object(o.b)("inlineCode",{parentName:"p"},"ChadoSequenceProcessor.processFeatureCVTermTable()")),Object(o.b)("h2",{id:"using-the-default-chado-source"},"Using the default chado source"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Add the chado database to your MINE","_","NAME.properties file, eg:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"db.flybase.datasource.class=org.postgresql.ds.PGPoolingDataSource\ndb.flybase.datasource.dataSourceName=db.flybase\ndb.flybase.datasource.serverName=SERVER_NAME\ndb.flybase.datasource.databaseName=DATABASE_NAME\ndb.flybase.datasource.user=USER_NAME\ndb.flybase.datasource.password=SECRET_PASSWORD\ndb.flybase.datasource.maxConnections=10\ndb.flybase.driver=org.postgresql.Driver\ndb.flybase.platform=PostgreSQL\n")),Object(o.b)("p",{parentName:"li"},"The chado database has to be on the local network.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Add source to project XML file"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-markup"}),'<source name="chado-db" type="chado-db">\n  <property name="source.db.name" value="flybase"/>\n  <property name="organisms" value="7227"/>\n  <property name="dataSourceName" value="FlyBase"/>\n  <property name="converter.class" value="org.intermine.bio.dataconversion.ChadoDBConverter"/>\n  <property name="processors" value="org.intermine.bio.dataconversion.SequenceProcessor"/>\n</source>\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run the build"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"flymine $ ./gradlew clean builddb\nflymine $ ./gradlew integrate -Psource=chado-db\n")))),Object(o.b)("p",null,"See ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/im-docs/docs/database/database-building/index"}),"Database Building")," for more information on running builds."),Object(o.b)("p",null,'This will load the data using the default chado loader. If you want to load more data, you will have to write a custom chado converter. FlyMine uses a FlyBase chado "processor" to parse interactions, etc. See ',Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/intermine/intermine/blob/master/bio/sources/chado-db/src/main/java/org/intermine/bio/dataconversion/FlyBaseProcessor.java"}),"FlyBaseProcessor.java")," for an example."),Object(o.b)("h2",{id:"tripal"},"Tripal"),Object(o.b)("p",null,'The Chado specific tables are not in the postgres default "public" schema of the database. Instead, Tripal puts it in a postgres schema named "chado".'),Object(o.b)("p",null,"To workaround this, you would need to alter your Chado processor to run this query first, before running any SELECT statements:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"ALTER DATABASE <dbname> SET search_path TO chado, public\n")),Object(o.b)("p",null,"Starting with ",Object(o.b)("strong",{parentName:"p"},"InterMine 1.8"),", you can instead directly define the schema in the properties of the database in your properties file, like"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"db.your_source.datasource.schema=your_schema\n")),Object(o.b)("p",null,"for example"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"db.tripaldbname.datasource.schema=chado\n")))}s.isMDXComponent=!0},547:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),s=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},d=function(e){var t=s(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=s(a),u=n,m=d["".concat(i,".").concat(u)]||d[u]||p[u]||o;return a?r.a.createElement(m,b(b({ref:t},l),{},{components:a})):r.a.createElement(m,b({ref:t},l))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var b={};for(var c in t)hasOwnProperty.call(t,c)&&(b[c]=t[c]);b.originalType=e,b.mdxType="string"==typeof e?e:n,i[1]=b;for(var l=2;l<o;l++)i[l]=a[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);